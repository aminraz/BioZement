#include "global.h"

void write_dist_binary(char *file_name, real *field, int num_ent, struct System *sys)
/*
write_dist_binary :
	dumps a field to a binary file.

  INPUT  : 1) file_name : base file name
		   2) t         : end time
		   3) field     : array to be saved
		   4) num_end   : number of entries in the field

  OUTPUT : void
 */
{
  int c; /* Counter */
  double f; /* help for writing to field to file */
  char fn[50]; /* file name */
  FILE *fp=NULL; /* file pointer */
  
  sprintf(fn, "%s/bfd/%s.bfd", sys->files["out"].c_str(), file_name);
  fp = fopen(fn,"wb");
  
  if ( fp == (FILE*)NULL ) 
  {
    printf("error opening %s\n",fn);
  } else{
    
    for( c=0; c < num_ent; ++c )
      {
	f = (double) field[c];
	fwrite(&f,sizeof(double),1,fp);
      }
    //printf("wrote %s\n",fn);
  }
  fclose(fp);
}


void read_dist_binary(char *file_name, real *field, int num_ent, struct System *sys)
/*
read_dist_binary :
	reads a file generated by 'write_dist_binary', and puts the 
	contents into an array.

  INPUT  : 1) file_name : base file name
		   2) t         : end time
		   3) field     : array to be read
		   4) num_end   : number of entries in the field

  OUTPUT : void
*/
{
  int c, num_read; /* counter, number of entries read */
  int iread; /* check for the EOF */
  double f; /* help to read from file */
  char fn[50]; /* file name */
  FILE *fp=NULL; /* file pointer */

  sprintf(fn, "%s/bfd/%s.bfd", sys->files["out"].c_str(), file_name);
  fp = fopen(fn,"rb");
  
  if (fp==(FILE*)NULL)
    {
      printf("error opening %s\n", fn);
      exit(1);
    } else {
	  num_read = 0;
	  for( c = 0; c < num_ent ; ++c )
	    {
	    if(fread(&f,sizeof(double),1,fp))
	      {
		field[c] = (real) f;
		num_read++;
	      }
	  }
	  
	  iread = getc(fp);
	  /* We dont stop the simulation as it could be that the user want to add one or more phases */
	  /* after a first run */
	  if( !(iread == EOF))
	  {
		  printf("WARNING: wrong dimensions (Nx, Ny, n_c_, etc. )\n");
		  printf("More data left in the input file\n");
      }
      if( !(num_read == num_ent) )
	  {
		  /* too few or to many elements in the input file */
		  printf("WARNING: wrong dimensions (max_x, max_y, n_c, ...)\n");
		  printf("Numbers read: %d should have been: %d\n ", num_read, num_ent );
		  printf("check input file!\n");
      }
      //printf("read %s\n", fn);
    }
  fclose(fp);
}


// -------------------------------------------------------
// 
// 
// -------------------------------------------------------
void write_1d_array(char *fname, double *data, int n)
{
  FILE *fp;
  size_t nwrite;
  fp = fopen(fname,"wb");
  if ( fp == NULL ) {
    printf("Error opening %s\n", fname);
  } else {
    nwrite = fwrite(data, sizeof(double), n, fp);
    if ((int)nwrite != n) printf("Error: wrong number of elements: %zu != %d\n", nwrite, n);
  }
  fclose(fp);
}

// -------------------------------------------------------
// 
// 
// -------------------------------------------------------
void read_1d_array(char *fname, double *data, int n)
{
  FILE *fp;
  size_t nread;
  fp = fopen(fname,"rb");
  if ( fp == NULL ) {
    printf("Error opening %s\n", fname);
  } else {
    nread = fread(data, sizeof(double), n, fp);
    if ((int)nread != n) printf("Error: wrong number of elements: %zu != %d\n", nread, n);
  }
  fclose(fp);
}

